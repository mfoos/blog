<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>I'd rather be eating</title><link href="https://mfoos.github.io/blog/" rel="alternate"></link><link href="https://mfoos.github.io/blog/feeds/all-en.atom.xml" rel="self"></link><id>https://mfoos.github.io/blog/</id><updated>2017-08-09T00:00:00-04:00</updated><entry><title>How I Do Shiny</title><link href="https://mfoos.github.io/blog/how-i-do-shiny.html" rel="alternate"></link><published>2017-08-09T00:00:00-04:00</published><updated>2017-08-09T00:00:00-04:00</updated><author><name>Marianna Foos</name></author><id>tag:mfoos.github.io,2017-08-09:/blog/how-i-do-shiny.html</id><summary type="html">&lt;p&gt;I've had a handful of conversations recently with people learning Shiny who all agree that despite the many available tutorials and examples, sometimes it's hard to figure out how to do what YOU want to do. I think this is exemplified by how long it took me to figure out …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've had a handful of conversations recently with people learning Shiny who all agree that despite the many available tutorials and examples, sometimes it's hard to figure out how to do what YOU want to do. I think this is exemplified by how long it took me to figure out how to read a CSV into a Shiny app as a global object. So here's a collection of my hard-won pro-tips, as well as some non-obvious approaches for "this shouldn't be complicated" tasks.&lt;/p&gt;
&lt;h3&gt;1. If the "invalidation" (odd-shaped boxes with arrows) explanations don't make sense to you, don't sweat it.&lt;/h3&gt;
&lt;p&gt;Some understanding of how the reactivity works will probably help you in the long right, but don't feel like you need to 110% understand it to get started. Try out the built-in [to RStudio] geyser app, and experiment with changing the inputs and outputs. You can build useful stuff with only that logic. Reactivity boils down to a "downstream flow" - when an input changes, everything that uses it (or uses something that uses it, etc etc) recalculates/rerenders. One thing about this that can be tricky is a situation where you recalculate based on an input, and use another input in some unexciting way like generating a label - they are both equally able to trigger things downstream.&lt;/p&gt;
&lt;h3&gt;2. If there's no output, but no error (and you're not already error-handling it), check your in/out alignment&lt;/h3&gt;
&lt;p&gt;I wish someone had told me this when I was getting started. If you do this in server.R:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;output&lt;span class="o"&gt;$&lt;/span&gt;mytable &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; renderDataTable&lt;span class="p"&gt;({&lt;/span&gt;table_code&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;but pair it with this in ui.R:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tableOutput&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mytable&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You will pull your hair out looking for the silent bug. I have also often done this by putting &lt;code&gt;renderPlot&lt;/code&gt; instead of &lt;code&gt;plotOutput&lt;/code&gt; because DUH, I want it to render in the UI.&lt;/p&gt;
&lt;h3&gt;3. Mutable globals exist, they're just different. And you should use them.&lt;/h3&gt;
&lt;p&gt;You can load a csv into a data.frame (and maybe manipulate it) outside the server function and refer to that globally within the server function. You quickly discover, however, that if you want to modify it based on user input, you can no longer just refer to it like a regular R variable. That's because everything inside the server function must be a "reactive" variable (unless it's inside the curly braces of another function). So to limit code duplication, you should consider making a reactive object if you're re-using the modified object. Here's an example from my life:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;my_df &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; read_tsv&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;cats.txt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
shinyServer&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;input&lt;span class="p"&gt;,&lt;/span&gt; output&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  reactive_df &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; reactive&lt;span class="p"&gt;({&lt;/span&gt;
    my_df &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; my_df &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; filter&lt;span class="p"&gt;(&lt;/span&gt;cat &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Herbie&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

  output&lt;span class="o"&gt;$&lt;/span&gt;mytable &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; renderDataTable&lt;span class="p"&gt;({&lt;/span&gt;
    reactive_df&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# you gotta reference it like a function&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

  output&lt;span class="o"&gt;$&lt;/span&gt;mydownload &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; downloadHandler&lt;span class="p"&gt;(&lt;/span&gt;
    filename &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Herbie.txt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    content &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;file&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
      write.table&lt;span class="p"&gt;(&lt;/span&gt;reactive_df&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="kp"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;4. Use dplyr to subset globals instead of making new reactive objects&lt;/h3&gt;
&lt;p&gt;So that was handy, right? But maybe you're like me, and you want to show URLs as links in the webapp, but text in the download. &lt;a href="https://cran.r-project.org/web/packages/dplyr/index.html"&gt;Dplyr&lt;/a&gt; has been a LIFESAVER for me in this regard. Let me revisit the example above:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;reactive_df &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; reactive&lt;span class="p"&gt;({&lt;/span&gt;
  my_df &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; my_df &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; filter&lt;span class="p"&gt;(&lt;/span&gt;cat &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Herbie&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

output&lt;span class="o"&gt;$&lt;/span&gt;mytable &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; renderDataTable&lt;span class="p"&gt;({&lt;/span&gt;
  reactive_df&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; mutate&lt;span class="p"&gt;(&lt;/span&gt;PetfinderURL &lt;span class="o"&gt;=&lt;/span&gt; createLink&lt;span class="p"&gt;(&lt;/span&gt;PetfinderURL&lt;span class="p"&gt;))&lt;/span&gt; 
&lt;span class="p"&gt;},&lt;/span&gt; escape &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# this is so the link will display as a link, not the HTML&lt;/span&gt;

output&lt;span class="o"&gt;$&lt;/span&gt;mydownload &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; downloadHandler&lt;span class="p"&gt;(&lt;/span&gt;
  filename &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Herbie.txt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  content &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;file&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    write.table&lt;span class="p"&gt;(&lt;/span&gt;reactive_df&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="kp"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;5. Using very long lists for dropdowns&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;1) I found it difficult to find examples for loading dropdown choices from a file. I am a bioinformatician. It sucked. Short version: ui.R can't access variables from server.R. If you'd like to &lt;code&gt;read_csv()&lt;/code&gt; a file, you have to do it a) in a global.R file if you're doing a "2 file app", or b) outside both server and ui functions if you're doing a "1 file app".&lt;/p&gt;
&lt;p&gt;2) For most of the apps I write, the &lt;code&gt;selectizeInput()&lt;/code&gt; is populated by gene names. So that's like 30k entries, and although that's a "fast enough" load when you're just starting a data analysis, it's not fast enough for your webapp users. The best solution I've found for this is &lt;code&gt;updateSelectizeInput()&lt;/code&gt;. Two of its parameters are tricky: &lt;em&gt;session&lt;/em&gt;, and &lt;em&gt;server&lt;/em&gt;. For the former, you just need to add "session" as a parameter of the server function: &lt;code&gt;shinyServer(function(input, output, session) {...}&lt;/code&gt; and you're done. For the latter, you have to choose whether to use the server for the &lt;code&gt;update&lt;/code&gt;. Using &lt;code&gt;server = TRUE&lt;/code&gt; is faster, but it triggers a reactive event, so the page in effect loads twice if the page is initialized with a selection (&lt;code&gt;selectizeInput(..., selected = "value")&lt;/code&gt; in ui.R). Nobody seems to be bothered by this but me, so if you know how to get around this, get at me on the twitters. If you use &lt;code&gt;server = FALSE&lt;/code&gt; it's a little slower, but still better than &lt;code&gt;selectizeInput()&lt;/code&gt; and also it behaves like you want it to. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;6. Use sqlite for faster lookup&lt;/h3&gt;
&lt;p&gt;Again, genes: there are a lot of them. Doing a lookup on a data.frame is surprisingly unacceptably slow. This should not be what slows down your app! SQLite aka sqlite3 comes standard with most Linux distros I've used, as well as Mac OSX, and it's basically like awesome csv. Read up on it, and/or use &lt;a href="https://cran.r-project.org/web/packages/RSQLite/index.html"&gt;RSQLite&lt;/a&gt; to create and access a database (it can be one table, tbh) and your lookups will be so much faster (at least on the server, ymmmv on a laptop).&lt;/p&gt;
&lt;h3&gt;7. Use lists to return multiple values&lt;/h3&gt;
&lt;p&gt;This falls under "feels hacky" but if you find yourself writing an ... elaborate &lt;code&gt;reactive()&lt;/code&gt; function, you might want to return multiple values. For me this happened when I wanted to process three dataframes the exact same way and did it in a loop rather than create three independent reactive functions. You can use a list to return multiple values, and just pass the variable around, accessing each variable with &lt;code&gt;secretly_a_list()[[1]]&lt;/code&gt; etc. The truth is, Shiny can basically do anything, if you're willing to get crazy.&lt;/p&gt;
&lt;h3&gt;8. The syntax for using DT::renderDataTable is &lt;code&gt;output$mydt &amp;lt;- DT::renderDataTable({datatable(dat, args)})&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;That's basically it. If you google around for "datatable shiny" there are lots of fabulous options you can use, and friggin NONE of them explain the syntax. Boom. Done.&lt;/p&gt;
&lt;h4&gt;Alright, I've spent enough time writing this. PUBLISH!&lt;/h4&gt;</content><category term="R"></category><category term="Shiny"></category><category term="How-To"></category></entry><entry><title>Event Report - DataRescue Boston @MIT</title><link href="https://mfoos.github.io/blog/event-report-datarescue-boston-mit.html" rel="alternate"></link><published>2017-02-23T00:00:00-05:00</published><updated>2017-02-23T00:00:00-05:00</updated><author><name>Marianna Foos</name></author><id>tag:mfoos.github.io,2017-02-23:/blog/event-report-datarescue-boston-mit.html</id><summary type="html">&lt;p&gt;Once upon a time an awesome lady I met on the internet, who blogs about challenging her own comfort zone, asked me if I might ever want to guest post. From what I can tell, she started a company, redirected her efforts there, and is sort of MIA on the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Once upon a time an awesome lady I met on the internet, who blogs about challenging her own comfort zone, asked me if I might ever want to guest post. From what I can tell, she started a company, redirected her efforts there, and is sort of MIA on the internet now. I hope it's her dream come true. Anyway, I had a hard time coming up with a challenge for my own comfort zone, but had finally settled on "attend a hackathon".&lt;/p&gt;
&lt;p&gt;This past Saturday, I attended a hackathon hosted by &lt;a href="https://datarescue-boston.github.io/"&gt;DataRescue Boston&lt;/a&gt; at MIT. DataRescue is a movement of volunteers working to archive taxpayer-funded scientific data in the event that an antagonistic administration were to limit access to it.&lt;/p&gt;
&lt;p&gt;I arrived at MIT half an hour late, because I screwed up, and was relieved to discover that it was still trickle-in time. There was a ton of coffee, bagels/toppings, OJ, fruit salad and awesome vegetarian breakfast burritos from Feed the People. I checked in, got a nametag, sticker and level keychain (!!!!) and was offered the option of opting out of photography at the event. &lt;/p&gt;
&lt;p&gt;I went and washed the MBTA slime off my hands, and sat down at a round table just as the program began. The organizers introduced themselves and the volunteer guides/managers, the purpose and motivation for Data Rescue, the facility information, the schedule and an outline of the roles folks could choose for the event. Two things that I really liked were the inclusion of facility information (bathroom and info table locations, etc.) and the pre-existing "Attendee Info Packet" they'd set up online with info in greater detail.&lt;/p&gt;
&lt;p&gt;People chose their own "track" from:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Surveyors: Researching government departments not already being archived (not touching data)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Seeders: Use the information supplied by the surveyors to identify and queue data that needs to be archived&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Harvesters: Download data, document download process, and upload to the archive&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Storytellers: Document the event for communication to the public and the press.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The roles/tracks was something I had researched ahead of time, but didn't quite understand, so I want to dwell on them for a moment. First of all, I'm a "technical" person aka I code, but given the importance of the mission, I went with the intention of "going where I was most needed". It turns out that was unnecessary: because of the size and parallelization of the national movement, there is already plenty in all stages of the pipeline. In addition, the software and workflow are designed so that at every stage (2-3 hours) the data is annotated and repackaged for the next person.&lt;/p&gt;
&lt;p&gt;The other thing I noticed about the tracks was that there were WAY more people there to "harvest" than anything else. To me this suggests that, of the people who were aware of the event, the majority of the ones who interpreted it as "for them" were coding people - big surprise. I'm a bit red-faced here because I've always been under the impression that all hackathons say that everyone is welcome regardless of technical skill, but that this is essentially lip service. I was wrong about at least this event and probably in general. Surveying and seeding needed subject matter experts, people familiar with government, and anyone know knows how to gather information on the web. Harvesting needed web-scrapers, sure, but we also needed subject matter experts, and web/UI developers (what just happened?! was it javascript?!). Storytelling needed critical thinkers and policy folks and technical journalists and social media experts and photographers.&lt;/p&gt;
&lt;p&gt;Once we had resettled by track, and then again by department (shoutout to team NOAA!) it was about 10am, and I'd say it took me about another hour to familiarize myself with the workflow (how to start, what to check) and choose a dataset that seemed right for me. I was just getting started relearning the Python BeautifulSoup package when many, many pizzas arrived. We all nommed pizza and continued working. Folks were helping each other out, both at the table and between tables via Slack - What does this mean? I'm getting this error, can someone help? Why is it doing this? Did javascript just happen? It was very relaxed and many an "I don't know" was gracefully given and accepted.&lt;/p&gt;
&lt;p&gt;I was plagued by a phantom 404 (after I checked the urls!) which ate up a lot of my time, but I eventually solved it (the library I used to check urls preprocessed them, the library I used to download didn't) and finished my download and archiving at home later. I now have the info and logins to contribute independent of an event, and I hope to do so.&lt;/p&gt;
&lt;p&gt;I enjoyed the event a lot - I was worried about disorganization and drudgery, but the DataRescue folks (Boston organizers and above) were very organized, and the distributed pipeline meant that individuals having issues didn't cause problems for the general forward progress of the group. There's another event coming up at &lt;a href="https://datarescue-boston.github.io/northeastern/"&gt;Northeastern&lt;/a&gt;, which I recommend checking out.&lt;/p&gt;
&lt;p&gt;Random comments on the event: There were gender neutral and accessible bathrooms, as well as vegetarian and gluten-free food options. There was no ASL/captioning, but all of the information was available in static written form. I'd say attendance was at least 1/3 women.&lt;/p&gt;</content><category term="hackathons"></category></entry><entry><title>Lightning Talks for the Unignited</title><link href="https://mfoos.github.io/blog/lightning-talks-for-the-unignited.html" rel="alternate"></link><published>2017-01-08T00:00:00-05:00</published><updated>2017-01-08T00:00:00-05:00</updated><author><name>Marianna Foos</name></author><id>tag:mfoos.github.io,2017-01-08:/blog/lightning-talks-for-the-unignited.html</id><summary type="html">&lt;p&gt;Today, while researching this blog post, I learned that there are KINDS of lightning talks. One of them is called "Ignite" so that's the source of the title. As organizer for &lt;a href="https://www.meetup.com/R-Ladies-Boston/"&gt;R-Ladies Boston&lt;/a&gt;, I'm recruiting for lightning talks for our next meetup. The folks who don't need to be asked …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Today, while researching this blog post, I learned that there are KINDS of lightning talks. One of them is called "Ignite" so that's the source of the title. As organizer for &lt;a href="https://www.meetup.com/R-Ladies-Boston/"&gt;R-Ladies Boston&lt;/a&gt;, I'm recruiting for lightning talks for our next meetup. The folks who don't need to be asked twice have already signed up, so now I'm aiming for the second line: folks who are interested/excited/curious about lightning talks but don't see the path to giving one. I know they exist because more often than not, I am one of them. (First piece of advice: You know that thing you joke on twitter about quitting your job to go do full time? Give a talk about that - I did.) &lt;/p&gt;
&lt;p&gt;All of these links come from &lt;a href="https://github.com/catehstn/technically-speaking"&gt;the Technically Speaking newsletter&lt;/a&gt;, which I highly recommend. It's run by two women and is about the ups, downs, how-tos, joys and rewards of public speaking. The link goes to back issues on github, but the newsletter itself comes once a week and is the absolute perfect length - I always have time to read the whole thing.&lt;/p&gt;
&lt;p&gt;I've pulled out links from 2016 with a focus on lightning talks, inspiration, and the odd bit of talk advice that is equally applicable to short, neighborhood talks as it is to full-length, national ones.&lt;/p&gt;
&lt;h3&gt;Why You Should Give A Talk [at R-Ladies Boston this month]&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://artsy.github.io/blog/2016/03/09/public-speaking-part1-is-it-for-me/"&gt;Public Speaking - Part 1: Is it For Me?&lt;/a&gt;
Oooh look! Part of a series! A few thoughts on why public speaking is worth working on.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://femgineer.com/2016/04/why-you-dont-need-to-be-an-expert-to-speak/"&gt;Why You Don’t Need To Be An Expert To Speak&lt;/a&gt;
Tips on nerves and seeing the interesting topics in your experiences. A good one: ask your peers what they think!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://medium.com/defensible-me/the-girl-on-the-stage-d5749b97e8be#.5mptfcj2v"&gt;The girl on the stage&lt;/a&gt;
An experienced speaker shares her perspective on the vulnerability we can feel prepping and speaking.&lt;/p&gt;
&lt;h3&gt;Picking A Topic&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://www.heidiwaterhouse.com/2016/06/19/how-to-write-a-lightning-talk/"&gt;How to write a lightning talk&lt;/a&gt;
Favorite part: "I always pick talk topics based on something I’m angry about."&lt;/p&gt;
&lt;p&gt;&lt;a href="http://missgeeky.com/2016/11/21/how-to-brainstorm-talk-ideas/"&gt;How To Brainstorm Talk Ideas&lt;/a&gt;
For those of us who like to be systematic, a framework for identifying topics that inspire you&lt;/p&gt;
&lt;p&gt;&lt;a href="https://medium.com/real-solutions-artificial-intelligence/tech-talks-what-to-say-when-you-have-nothing-to-say-4d833f81636c#.oloaz2na0"&gt;Tech Talks: What to Say When You Have “Nothing to Say”&lt;/a&gt;
While very "tech" focused, this includes descriptions of directions you might go in picking a topic, complete with EXAMPLES! ::heart eye emoji::&lt;/p&gt;
&lt;p&gt;&lt;a href="http://lucybain.com/blog/2016/conference-proposal-ideas/"&gt;How to come up with conference proposal ideas&lt;/a&gt;
Complete with printable worksheet and exertion limit!&lt;/p&gt;
&lt;p&gt;&lt;a href="http://cattsmall.com/advice/2016/08/11/become-public-speaker-3.html"&gt;How to become a public speaker in 1 year – Step 3: Generate interesting topics&lt;/a&gt;
Barging in the middle of a series, I know! - I'm a big fan of "find a topic" posts.&lt;/p&gt;
&lt;h3&gt;Finer Points&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://scottberkun.com/2009/how-to-give-a-great-ignite-talk/"&gt;How To Give a Great Ignite Talk&lt;/a&gt;
Specific advice for every stage of the lightning talk lifecycle, from brainstorming topics to robust delivery.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://alicebartlett.co.uk/blog/how-to-do-ok-at-slides"&gt;A white-label slide deck&lt;/a&gt;
This post says it's for big audiences, but don't be deterred! It covers a lot "types" of slides, and how to emphasize without clutter.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.sqisland.com/2012/06/how-to-be-confident-speaker.html"&gt;How to be a confident speaker&lt;/a&gt;
How to build your confidence by practicing, without taking yourself too seriously&lt;/p&gt;</content><category term="resources"></category><category term="speaking"></category><category term="R-Ladies"></category></entry><entry><title>Hello, world!</title><link href="https://mfoos.github.io/blog/hello-world.html" rel="alternate"></link><published>2016-09-18T00:00:00-04:00</published><updated>2016-09-18T00:00:00-04:00</updated><author><name>Marianna Foos</name></author><id>tag:mfoos.github.io,2016-09-18:/blog/hello-world.html</id><summary type="html">&lt;p&gt;It's been on my list of "haunting tasks" (this is a real list I keep) to "make a Jekyll blog on Github pages". However, my experience with Jekyll was: jargon jargon jargon, gem install. Since I try not to type mysterious things into my terminal, I googled around, and eventually …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's been on my list of "haunting tasks" (this is a real list I keep) to "make a Jekyll blog on Github pages". However, my experience with Jekyll was: jargon jargon jargon, gem install. Since I try not to type mysterious things into my terminal, I googled around, and eventually found a page titled &lt;a href="http://guides.rubygems.org/what-is-a-gem/"&gt;"What is a gem?"&lt;/a&gt; that doesn't actually answer the question. Eventually this path led to many complaints about Ruby dependency nightmares with Jekyll, a blog comment about "other static site generators", and my using &lt;a href="http://docs.getpelican.com/"&gt;Pelican&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here are some things I learned while throwing this together today:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;I am an example-oriented learner, so I briefly browsed the docs and then started with the &lt;a href="http://docs.getpelican.com/en/3.6.3/quickstart.html"&gt;quickstart&lt;/a&gt; option. It builds you a barebones page that is then as flexible as if built by hand. Viewing config &amp;amp; styling documents is straightforward and you can get on your way fast.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you are using Github pages, the helpful info is in &lt;a href="http://docs.getpelican.com/en/3.6.3/tips.html"&gt;tips&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I have a static Github page at my .io URL, and I spend a lot of time trying to figure out how I could put a blog at mfoos.github.io/blog/ without having a confusing directory structure and/or files everywhere. I ultimately figured it out using &lt;a href="https://gohugo.io/tutorials/github-pages-blog/"&gt;this Hugo tutorial&lt;/a&gt;.
Basically:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Create a totally separate repo called "blog" (or whatever)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a branch called "gh-pages" (this exactly)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;WHILE ON THE MASTER BRANCH use &lt;a href="https://github.com/davisp/ghp-import"&gt;ghp-import&lt;/a&gt; to automatically rename the contents of your &lt;code&gt;output&lt;/code&gt; so that ONCE DEPLOYED they all live in the /blog folder &lt;code&gt;git push origin gh-pages&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I also noticed that the themes appear slightly different in the local browser preview vs hosted on Github, so make sure you like the hosted version too.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now I have a blog. Better write about something.&lt;/p&gt;</content><category term="updates"></category></entry><entry><title>First Post</title><link href="https://mfoos.github.io/blog/first-post.html" rel="alternate"></link><published>2016-09-17T00:00:00-04:00</published><updated>2016-09-17T00:00:00-04:00</updated><author><name>Marianna Foos</name></author><id>tag:mfoos.github.io,2016-09-17:/blog/first-post.html</id><summary type="html">&lt;p&gt;Oh Hello, I am a blog post. Probably.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Oh Hello, I am a blog post. Probably.&lt;/p&gt;</content><category term="cats"></category><category term="blogposts"></category><category term="updates"></category></entry></feed>